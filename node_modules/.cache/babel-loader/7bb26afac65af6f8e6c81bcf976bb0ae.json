{"ast":null,"code":"var _jsxFileName = \"/home/karolina/Desktop/ShoppingList/src/components/ToDoList/ToDoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from './Todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList(props) {\n  _s();\n\n  const [todoListState, setTodoListState] = useState({\n    todos: \"hej\",\n    inputValue: \"\",\n    error: \"\"\n  });\n\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target; //setInputValues(value)\n\n    setTodoListState({ ...todoListState,\n      //zachowujemy to co było\n      inputValue: value //nadpisujemy to co sie zmieniło\n\n    });\n  };\n\n  const handleButtonClick = () => {\n    const {\n      todos\n    } = todoListState; //blokada zeby nie wprowadzic pustego zadania\n\n    if (!inputValue) return; //jesli juz istnieje taki sam element jak teraz dodajemy\n\n    if (todos.some(todo => todo === inputValue)) {\n      //funckja some sprawdza czy w tablicy jest juz taki element jak podajemy\n      setTodoListState({ ...todoListState,\n        inputValue: \"\",\n        error: \"Ten produkt jest już na liście!\"\n      });\n      return;\n    }\n\n    setTodoListState({\n      //todos: [...todos, inputValue],\n      todos: [...todos, inputValue],\n      inputValue: \"\",\n      error: \"\"\n    });\n  };\n\n  const handeToDoRemove = toDoValue => {\n    setTodoListState({ ...todoListState,\n      todos: todos.filter(todo => todo !== toDoValue) //funckaj filter zwraca obiekt, ktory jest prawda dla danego warunku\n      //czyli my chcemy zeby zwrocila wszystkie obiektry poza tym przeslanym jako argument funkcji\n\n    });\n  };\n\n  const {\n    todos,\n    inputValue,\n    error\n  } = todoListState;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"item\",\n      placeholder: \"add new item\",\n      value: inputValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addButton\",\n      onClick: handleButtonClick,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this), !!error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My list:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listItem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDoList, \"wbyWanyEDvA39wV6WMmS5FiQuHw=\");\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/home/karolina/Desktop/ShoppingList/src/components/ToDoList/ToDoList.js"],"names":["React","useState","Todo","ToDoList","props","todoListState","setTodoListState","todos","inputValue","error","handleInputChange","event","value","target","handleButtonClick","some","todo","handeToDoRemove","toDoValue","filter"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AACpB,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCL,QAAQ,CAAC;AAACM,IAAAA,KAAK,EAAE,KAAR;AAAeC,IAAAA,UAAU,EAAE,EAA3B;AAA+BC,IAAAA,KAAK,EAAE;AAAtC,GAAD,CAAlD;;AAEA,QAAMC,iBAAiB,GAAEC,KAAD,IAAS;AAC7B,UAAM;AAACC,MAAAA;AAAD,QAAUD,KAAK,CAACE,MAAtB,CAD6B,CAE7B;;AACAP,IAAAA,gBAAgB,CAAC,EACb,GAAGD,aADU;AACK;AAClBG,MAAAA,UAAU,EAAEI,KAFC,CAEK;;AAFL,KAAD,CAAhB;AAIH,GAPD;;AASA,QAAME,iBAAiB,GAAC,MAAI;AACxB,UAAM;AAAEP,MAAAA;AAAF,QAAYF,aAAlB,CADwB,CAGxB;;AACA,QAAI,CAACG,UAAL,EAAiB,OAJO,CAMxB;;AACA,QAAID,KAAK,CAACQ,IAAN,CAAWC,IAAI,IAAEA,IAAI,KAAGR,UAAxB,CAAJ,EAAwC;AAAE;AACtCF,MAAAA,gBAAgB,CAAC,EACb,GAAGD,aADU;AAEbG,QAAAA,UAAU,EAAE,EAFC;AAGbC,QAAAA,KAAK,EAAE;AAHM,OAAD,CAAhB;AAKA;AACH;;AAEDH,IAAAA,gBAAgB,CAAC;AACb;AACAC,MAAAA,KAAK,EAAE,CAAC,GAAGA,KAAJ,EAAWC,UAAX,CAFM;AAGbA,MAAAA,UAAU,EAAE,EAHC;AAIbC,MAAAA,KAAK,EAAE;AAJM,KAAD,CAAhB;AAMH,GAtBD;;AAwBA,QAAMQ,eAAe,GAAEC,SAAD,IAAa;AAChCZ,IAAAA,gBAAgB,CAAC,EACb,GAAGD,aADU;AAEbE,MAAAA,KAAK,EAAEA,KAAK,CAACY,MAAN,CAAaH,IAAI,IAAIA,IAAI,KAAGE,SAA5B,CAFM,CAEiC;AAC9C;;AAHa,KAAD,CAAhB;AAMF,GAPD;;AASA,QAAM;AAACX,IAAAA,KAAD;AAAQC,IAAAA,UAAR;AAAoBC,IAAAA;AAApB,MAA6BJ,aAAnC;AACA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,WAAW,EAAC,cAA3C;AAA0D,MAAA,KAAK,EAAEG,UAAjE;AAA6E,MAAA,QAAQ,EAAEE;AAAvF;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAEI,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAIK,CAAC,CAACL,KAAF,iBACO;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA,gBAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA,YALZ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAPJ,eAQI;AAAK,MAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,YARJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GA5DQN,Q;;KAAAA,Q;AA8DT,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react'\nimport Todo from './Todo'\n\nfunction ToDoList(props){\n    const [todoListState, setTodoListState] = useState({todos: \"hej\", inputValue: \"\", error: \"\"})\n\n    const handleInputChange=(event)=>{\n        const {value} = event.target;\n        //setInputValues(value)\n        setTodoListState({\n            ...todoListState, //zachowujemy to co było\n            inputValue: value //nadpisujemy to co sie zmieniło\n        })\n    }\n\n    const handleButtonClick=()=>{\n        const { todos } = todoListState;\n\n        //blokada zeby nie wprowadzic pustego zadania\n        if (!inputValue) return;\n\n        //jesli juz istnieje taki sam element jak teraz dodajemy\n        if (todos.some(todo=>todo===inputValue)){ //funckja some sprawdza czy w tablicy jest juz taki element jak podajemy\n            setTodoListState({\n                ...todoListState,\n                inputValue: \"\",\n                error: \"Ten produkt jest już na liście!\"\n            })\n            return;\n        }\n\n        setTodoListState({\n            //todos: [...todos, inputValue],\n            todos: [...todos, inputValue],\n            inputValue: \"\",\n            error: \"\"\n        })\n    }\n\n    const handeToDoRemove=(toDoValue)=>{\n       setTodoListState({\n           ...todoListState,\n           todos: todos.filter(todo => todo!==toDoValue) //funckaj filter zwraca obiekt, ktory jest prawda dla danego warunku\n           //czyli my chcemy zeby zwrocila wszystkie obiektry poza tym przeslanym jako argument funkcji\n\n       })\n    }\n\n    const {todos, inputValue, error} = todoListState;\n    return(\n        <div>\n            <input type=\"text\" name=\"item\" placeholder=\"add new item\" value={inputValue} onChange={handleInputChange}></input>\n            <button className=\"addButton\" onClick={handleButtonClick}>Add</button>\n\n            {!!error &&\n                    <p className=\"error\">{error}</p>\n            }\n            <h3>My list:</h3>\n            <div className=\"listItem\">\n                \n            </div>\n        </div>\n    )\n}\n\nexport default ToDoList"]},"metadata":{},"sourceType":"module"}