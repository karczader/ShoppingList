{"ast":null,"code":"var _jsxFileName = \"/home/karolina/Desktop/ShoppingList/src/components/ToDoList/ToDoList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Todo from './Todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ToDoList(props) {\n  _s();\n\n  const [todoList, setToDoList] = useState([\"apple\", \"banana\"]);\n  const [inputValues, setInputValues] = useState(\"\");\n  const [error, setError] = useState(\"\");\n  const [number, setNumber] = useState(1);\n\n  const handleInputChange = event => {\n    const {\n      value\n    } = event.target;\n    setInputValues(value);\n  };\n\n  const handleButtonClick = () => {\n    //blokada zeby nie wprowadzic pustego zadania\n    if (!inputValues) return; //jesli juz istnieje taki sam element jak teraz dodajemy\n\n    if (todoList.some(todo => todo === inputValues)) {\n      setToDoList(todoList);\n      setError(\"To zadanie już istnieje\");\n      setInputValues(\"\");\n      return;\n    }\n\n    setToDoList([...todoList, inputValues]); //rozdzielenie tablicy na pojedyczne stringi i dodanie nowego na koniec\n\n    setInputValues(\"\");\n    setError(\"\");\n  }; //usuwanie!!!!!!!\n\n\n  const handeToDoRemove = toDoValues => {//setToDoList(todoList)\n    //setInputValues(todoList.filter(todo=> todo!=toDoValues))\n    //USUWANIE NIE DZIALA!!!!!!!\n    //setToDoList([...todoList, todoList.filter(todo=>todo!=toDoValues)])\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"item\",\n      placeholder: \"  add new item\",\n      value: inputValues,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"addButton\",\n      onClick: handleButtonClick,\n      children: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), !!error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"My list:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"listItem\",\n      children: todoList.map(todo => /*#__PURE__*/_jsxDEV(Todo, {\n        todo: todo,\n        onCloseClick: handeToDoRemove\n      }, todo, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 40\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n}\n\n_s(ToDoList, \"Snq3DB01k7FLSfjoHjVNqr1qHmw=\");\n\n_c = ToDoList;\nexport default ToDoList;\n\nvar _c;\n\n$RefreshReg$(_c, \"ToDoList\");","map":{"version":3,"sources":["/home/karolina/Desktop/ShoppingList/src/components/ToDoList/ToDoList.js"],"names":["React","useState","Todo","ToDoList","props","todoList","setToDoList","inputValues","setInputValues","error","setError","number","setNumber","handleInputChange","event","value","target","handleButtonClick","some","todo","handeToDoRemove","toDoValues","map"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AACpB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,CAAC,OAAD,EAAU,QAAV,CAAD,CAAxC;AACA,QAAM,CAACM,WAAD,EAAcC,cAAd,IAAgCP,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACQ,KAAD,EAAQC,QAAR,IAAkBT,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,CAAD,CAApC;;AAGA,QAAMY,iBAAiB,GAAEC,KAAD,IAAS;AAC7B,UAAM;AAACC,MAAAA;AAAD,QAAUD,KAAK,CAACE,MAAtB;AACAR,IAAAA,cAAc,CAACO,KAAD,CAAd;AACH,GAHD;;AAKA,QAAME,iBAAiB,GAAC,MAAI;AAExB;AACA,QAAI,CAACV,WAAL,EAAkB,OAHM,CAKxB;;AACA,QAAIF,QAAQ,CAACa,IAAT,CAAcC,IAAI,IAAEA,IAAI,KAAGZ,WAA3B,CAAJ,EAA4C;AACxCD,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAK,MAAAA,QAAQ,CAAC,yBAAD,CAAR;AACAF,MAAAA,cAAc,CAAC,EAAD,CAAd;AAEA;AACH;;AACDF,IAAAA,WAAW,CAAC,CAAC,GAAGD,QAAJ,EAAcE,WAAd,CAAD,CAAX,CAbwB,CAagB;;AACxCC,IAAAA,cAAc,CAAC,EAAD,CAAd;AACAE,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACH,GAhBD,CAZoB,CA8BpB;;;AACA,QAAMU,eAAe,GAAEC,UAAD,IAAc,CAChC;AACA;AAEA;AACA;AACH,GAND;;AASA,sBACI;AAAA,4BACI;AAAO,MAAA,IAAI,EAAC,MAAZ;AAAmB,MAAA,IAAI,EAAC,MAAxB;AAA+B,MAAA,WAAW,EAAC,gBAA3C;AAA4D,MAAA,KAAK,EAAEd,WAAnE;AAAgF,MAAA,QAAQ,EAAEM;AAA1F;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,SAAS,EAAC,WAAlB;AAA8B,MAAA,OAAO,EAAEI,iBAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,EAGK,CAAC,CAACR,KAAF,iBACO;AAAG,MAAA,SAAS,EAAC,OAAb;AAAA,gBAAsBA;AAAtB;AAAA;AAAA;AAAA;AAAA,YAJZ,eAMI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YANJ,eAOI;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBAEKJ,QAAQ,CAACiB,GAAT,CAAcH,IAAD,iBAAS,QAAC,IAAD;AAAiB,QAAA,IAAI,EAAEA,IAAvB;AAA6B,QAAA,YAAY,EAAEC;AAA3C,SAAWD,IAAX;AAAA;AAAA;AAAA;AAAA,cAAtB;AAFL;AAAA;AAAA;AAAA;AAAA,YAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH;;GAtDQhB,Q;;KAAAA,Q;AAwDT,eAAeA,QAAf","sourcesContent":["import React, {useState} from 'react'\nimport Todo from './Todo'\n\nfunction ToDoList(props){\n    const [todoList, setToDoList] = useState([\"apple\", \"banana\"]);\n    const [inputValues, setInputValues] = useState(\"\")\n    const [error, setError]=useState(\"\")\n    const [number, setNumber] = useState(1)\n\n\n    const handleInputChange=(event)=>{\n        const {value} = event.target\n        setInputValues(value)\n    }\n\n    const handleButtonClick=()=>{\n\n        //blokada zeby nie wprowadzic pustego zadania\n        if (!inputValues) return\n\n        //jesli juz istnieje taki sam element jak teraz dodajemy\n        if (todoList.some(todo=>todo===inputValues)){\n            setToDoList(todoList)\n            setError(\"To zadanie już istnieje\")\n            setInputValues(\"\")\n\n            return;\n        }\n        setToDoList([...todoList, inputValues]) //rozdzielenie tablicy na pojedyczne stringi i dodanie nowego na koniec\n        setInputValues(\"\")\n        setError(\"\")\n    }\n\n    //usuwanie!!!!!!!\n    const handeToDoRemove=(toDoValues)=>{\n        //setToDoList(todoList)\n        //setInputValues(todoList.filter(todo=> todo!=toDoValues))\n        \n        //USUWANIE NIE DZIALA!!!!!!!\n        //setToDoList([...todoList, todoList.filter(todo=>todo!=toDoValues)])\n    }\n\n    \n    return(\n        <div>\n            <input type=\"text\" name=\"item\" placeholder=\"  add new item\" value={inputValues} onChange={handleInputChange}></input>\n            <button className=\"addButton\" onClick={handleButtonClick}>Add</button>\n            {!!error &&\n                    <p className=\"error\">{error}</p>\n                }\n            <h3>My list:</h3>\n            <div className=\"listItem\">\n                \n                {todoList.map((todo)=>(<Todo key={todo} todo={todo} onCloseClick={handeToDoRemove}/>))}\n            </div>\n        </div>\n    )\n}\n\nexport default ToDoList"]},"metadata":{},"sourceType":"module"}